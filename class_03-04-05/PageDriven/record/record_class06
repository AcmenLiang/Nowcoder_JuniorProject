    web的主要功能已经完成，该文件主要记录对web的一些额外功能的补充或者页面的一些优化。

<1>next优化
    在注册/登录函数处，我们在return render_template('login.html', msg=msg,next=request.values.get('next')) 语句中加入了
返回next字段，这是为了在点击登录/注册之后并登录/注册成功之后返回之前所在的页面。
    注意到在注册页的路由后面跟了一个 next 字段， 这是用来表明在用户登录之后， 所应该跳转到的页面， 这里， 我们可以将这个
next字段写入到form表单中，提交处理后，根据next字段是否为空，进行相应的跳转。

<2>导航栏的优化
    我们看到我们拿到的前端的页面看上去很费劲，没有地方让我们点击退出登录，于是，我们就考虑借助bootstrap优化下导航栏，
实现用户可以点击登陆登出操作。
    加入导航栏后显示用户状态，个热门主页，登录，登出，注册等按钮，增强可视化。主要是在base.html中做优化，可以不必理会。
实际干的一个操作，只是替换了一下base.html, 将相应的导航栏加入进来。

<3>新版登录/注册页面----登陆页面替换
    由于这个前端给出的登陆注册页面是合在一起的，但是我们通常的注册页面，是需要填写邮箱，密码也是需要重复输入，避免错误录
入的，很显然这个登陆页面是不符合我们的需求的。
    这里我们使用flask-bootstrap以及flask-wtf扩展功能实现了登陆和注册两个表单，用来替换我们之前的登陆页面。
    旧版的登录注册我们并没有删除，在views.py中还保留有函数，配套的是login.html；还是可以正常使用，只不过我们把登录入口的
定向改为了新登录的URL。新的登录注册界面我们写了2个HTML文件，为relogin_login.html和relogin_register.html，用于新版注册登录
函数的URL入口。在relogin/forms.py中实现2个表单的书写，使用flask-wtf可以保护表单免受 跨站请求伪造（CSRF）的攻击恶意网站将
请求发送到被攻击者已登录的其他网站时就会引发CSRF。
    其他的登录注册逻辑跟之前一模一样，就是多了一步从form中提取数据，原先是request.values。