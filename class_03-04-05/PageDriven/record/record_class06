    web的主要功能已经完成，该文件主要记录对web的一些额外功能的补充或者页面的一些优化。

<1>next优化
    在注册/登录函数处，我们在return render_template('login.html', msg=msg,next=request.values.get('next')) 语句中加入了
返回next字段，这是为了在点击登录/注册之后并登录/注册成功之后返回之前所在的页面。
    注意到在注册页的路由后面跟了一个 next 字段， 这是用来表明在用户登录之后， 所应该跳转到的页面， 这里， 我们可以将这个
next字段写入到form表单中，提交处理后，根据next字段是否为空，进行相应的跳转。

<2>导航栏的优化
    我们看到我们拿到的前端的页面看上去很费劲，没有地方让我们点击退出登录，于是，我们就考虑借助bootstrap优化下导航栏，
实现用户可以点击登陆登出操作。
    加入导航栏后显示用户状态，个热门主页，登录，登出，注册等按钮，增强可视化。主要是在base.html中做优化，可以不必理会。
实际干的一个操作，只是替换了一下base.html, 将相应的导航栏加入进来。

<3>新版登录/注册页面----登陆页面替换
    由于这个前端给出的登陆注册页面是合在一起的，但是我们通常的注册页面，是需要填写邮箱，密码也是需要重复输入，避免错误录
入的，很显然这个登陆页面是不符合我们的需求的。
    这里我们使用flask-bootstrap以及flask-wtf扩展功能实现了登陆和注册两个表单，用来替换我们之前的登陆页面。
    旧版的登录注册我们并没有删除，在views.py中还保留有函数，配套的是login.html；还是可以正常使用，只不过我们把登录入口的
定向改为了新登录的URL。新的登录注册界面我们写了2个HTML文件，为relogin_login.html和relogin_register.html，用于新版注册登录
函数的URL入口。在relogin/forms.py中实现2个表单的书写，使用flask-wtf可以保护表单免受 跨站请求伪造（CSRF）的攻击恶意网站将
请求发送到被攻击者已登录的其他网站时就会引发CSRF。
    其他的登录注册逻辑跟之前一模一样，就是多了一步从form中提取数据，原先是request.values。

<4>注册通知邮件模块
    我们一般在注册一个网站的时候， 都会收到一份注册邮件， 用来激活我们的账户， 这里为了简化起见， 我们仅仅只是向我们的注
册邮箱发送一份邮件。
所用模块：
    1.flask-mail
    给用户发送邮件是 Web 应用中最常见的任务之一，比如用户注册，找回密码等。Python 内置了一个 smtplib 的模块，可以用来发
送邮件，这里我们使用 Flask-Mail，是因为它可以和 Flask 集成，让我们更方便地实现此功能。
    使用flask-mail要对邮箱进行配置，为https://blog.csdn.net/stan_pcf/article/details/51098126。
    使用flask-mail的代码过程， http://python.jobbole.com/86765/
配置 app 对象的邮件服务器地址，端口，用户名和密码等
创建一个 Mail 的实例：mail = Mail(app)
创建一个 Message 消息实例，有三个参数：邮件标题、发送者和接收者
创建邮件内容，如果是 HTML 格式，则使用 msg.html，如果是纯文本格式，则使用 msg.body
最后调用 mail.send(msg) 发送消息
    2.flask-url_for
补充解释：
https://blog.csdn.net/baidu_36831253/article/details/78208650
https://blog.csdn.net/dengfan666/article/details/78320188/
    url_for() 函数最简单的用法是以视图函数名作为参数，返回对应的url，还可以用作加载静态文件。该项目在new_user.html静态
文件中使用url_for函数，用来重定向。url_for是用来拼接 URL 的，可以使用程序 URL 映射中保存的信息生成 URL。url_for() 函数最
简单的用法是以视图函数名作为参数， 返回对应的 URL。例如，在示例程序中 hello.py 中调用 url_for('index') 得到的结果是 /。
这里的index是函数名。
    3.flask-current_app
    全局变量current_app，用于表示当前运行程序文件的程序实例。附current_app，g，request等flask中变量的区别：
https://blog.csdn.net/lyj20170608/article/details/79636583
https://blog.csdn.net/hyman_c/article/details/53512109
    token密钥的认证与反认证，使用Serializer，主要进行防止邮件认证链接被盗用，可参考该链接，几乎是全部的总结：
https://blog.csdn.net/bestallen/article/details/52295171
    4.bug集锦：
models.py文件增加email_actived = db.Column(db.BOOLEAN, default=False)
__init__.py增加sys模块，防止解码错误
not_found .txt：目录位置不对
SQL删除了，但是不管用:那是因为没用SQL语句删除，应用delete from users where id>30

    5.该部分总结：
    用flask-mail发送邮件，邮件内容用到了flask-url_for对url重定向，其中重定向是为了认证链接的跳转，因为需要进行confirm认证
是否是该id的链接，这就扯到了token密钥的产生，是通过current_app以及Serializer函数的使用，至此，完毕。
    附该部分内容某blog的实现，讲的和我几乎一样：
https://blog.csdn.net/bestallen/article/details/52295171
