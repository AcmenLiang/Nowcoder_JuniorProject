    该项目整个思路或碰到的问题以及用到的知识可以参考如下文章，可以将他的功能简述，技术路线，问题集锦摘录下来：
https://blog.csdn.net/zhyh1435589631/article/details/51787577
    关于项目实现，先自己按视频做，尽可能自己把视频中的功能实现；如果实现不了，参考网上项目的代码照着更改；如果实在是抄也
抄不出来，就看看往上那个人的代码，理解一下即可。简历的项目功能上是全部按照网上那个来写，就看怎么去吹牛了。

1.pycharm and Git

2.flask框架

3.flask-script模块的使用中manager脚本文件；

4.jinja2模板的使用，模板继承，如何对HTML文件进行改写开发，使用MVC模式；

5.flask sqlalchemy模块的使用与mysql建立ORM映射；

6.注册功能的业务实现：
    request中args,form,values请求方式：https://www.jianshu.com/p/ecd97b1c21c1
    注册后的业务判断，比如加上flash message：http://docs.jinkan.org/docs/flask/patterns/flashing.html
    flash message的分类闪现和过滤闪现，要在每一次返回首页时传给前端，做一个显示：
        一、闪现（message）
           “Flask Message”是一个很有意思的功能，一般一个操作完成后，我们都希望在页面上闪出一个消息，告诉用户操作的结果。
        用户看完后，这个消息就不复存在了。Flask提供的”flash”功能就是为了这个。“flash()”方法的第二个参数是消息类型，
        可选择的有”message”, “info”, “warning”, “error”。你可以在获取消息时，同时获取消息类型，还可以过滤特定的
        消息类型。只需设置”get_flashed_messages()”方法的”with_categories”和”category_filter”参数即可。
        1、流程：利用flask中的flash，向某个地方设置一个值，可以指定一个分类参数，用的时候就可以从保存的地方取出所有值，可以指定分类参数
        2、应用：通常用做对临时数据的操作
        3、原理：message是一个基于Session实现的用于保存数据的集合，保存到用户对应的session信息中，其特点是：使用一次就删除利用session.pop方法
        一定要注意要加secret_key 参数
        # 向某个地方设置一个值,category参数是分类的意思       分类闪现
        flash('超时错误',category="x1")
         # 从某个地方获取设置过的所有值，并指定分类，并清除。 过滤闪现
        data = get_flashed_messages(category_filter=['x1'])

6.flask-login模块的使用，登录/登出/浏览功能的业务实现；
    flask_login库的使用：https://www.jianshu.com/p/5a25413b4828
    flask-login中user_load的使用：https://zhidao.baidu.com/question/1832618256059873580.html
    可见record_class04中登录/登出功能实现，页面访问的笔记；
    使用flask-login需要注意的几点吧：
        1.要进行类实例的声明；
        2.要实现未登录没有权限是自动跳转到登录页，用view实现；
        3.要实现current_user全局变量的判断，即要有动态跳转页面，即如果登录了的话就会首页，未登录就会登录页；
        4.对页面优化，用next，登录后返回登录前的页面；
        5.其他的就是登录，注册，访问的基本要求就不写了，都在代码中，看record_class04中笔记。

7.profile的AJAX实现以及index的AJAX实现；
    AJAX就是一个业务上的需求，了解即可；见views.py中的user_images函数以及profile.html中的部分代码。
    AJAX的开发流程：前端设定一个更多按钮，等待后端发送过接口；后端发送一个map，里面存储hax_next，image等变量，每次都是
利用分页提取的方式存入map中，然后将map传给前端，前端拿来显示即可。
    前端代码不多说，AJAX的后台开发主要是实现分页浏览，用分页paginate查询函数然后获取信息最终返回json串的方法给前端显示
即可。

8.图片上传；
    详细内容见record_class05_<1> 里面清除写了各部分原理。
    技术流为fiddle web debugger工具的使用;HTTP post 单/多变量的上传；文件上传步骤的python代码逻辑；
    收获，不应该讲解几行代码，应该讲熟悉HTTP post协议，从头到尾数据是怎么打包的，数据是怎么跟参数解析出来的。

9.七牛云存储----通过python上传文件到七牛云服务器
    参考网站：
https://developer.qiniu.com/kodo/sdk/1242/python#upload
https://www.cnblogs.com/shijingjing07/p/5754273.html
https://www.cnblogs.com/lzxwalex/p/6629435.html
    收获，使用postman进行调试，没有前端的时候，模拟API接口，发送过后看HTTP头部的变化等，看web的的变化，比如是否上传成功
等。使用云实时缩图，独立CDN等优化，可以吹逼。
    代码逻辑以及详细代码在record_class05_<2>，主要文献看上面几个即可。

10.增加评论
    搞懂为什么用post请求；搞懂提交评论时所需构造的实例的属性怎么request来以及请求哪些属性；最后搞懂该给前端返回什么。
详情代码及注释见record_class05_<3>。

11.导航栏优化，新版注册/登录界面
    导航栏优化使用Flask-Bootstrap，Bootstrap 是 Twitter 开发的一个开源框架，它提供的用户界面组件可用于创建整洁且具有吸引
力的网页，而且这些网页还能兼容所有现代 Web 浏览器。
    Bootstrap 是客户端框架，因此不会直接涉及服务器。服务器需要做的只是提供引用了 Bootstrap 层叠样式表（CSS）和 JavaScript
文件的 HTML 响应， 并且 HTML、CSS 和 JavaScript 代码中实例化所需组件。这些操作最理想的执行场所就是模版。
    Flask-Bootstrap 可以在程序中集成 Bootstrap。
    https://blog.csdn.net/sinat_29315627/article/details/72879366   前端，不必太深究。
    新版注册/登录使用2个表单，用框架flask-wtf。换了个界面，加了一个表单验证，其他的登录返回都一样。其他的登录注册逻辑跟
之前一模一样，就是多了一步从form中提取数据，原先是request.values。

12.注册通知邮件
    技术点较多，主要使用flask-mail，flask-url_for，flask-current_app这3个模块对功能进行组合。
    该部分总结：
    用flask-mail发送邮件，邮件内容用到了flask-url_for对url重定向，其中重定向是为了认证链接的跳转，因为需要进行confirm认证
是否是该id的链接，这就扯到了token密钥的产生，是通过current_app以及Serializer函数的使用，至此，完毕。
    我的代码主要在views.py与models.py中，可以参见Git的commit记录做更改的部分即可，自己看代码和注释，不多说。
    附该部分内容某blog的实现，讲的和我几乎一样：
https://blog.csdn.net/bestallen/article/details/52295171

13.单元测试
    测试四部曲(所有语言都是这个思路)：
    1.初始化数据：初始化的数据一般放在setUp()函数中；
    2.执行要测试的业务：就是测试用例中的那个test方法，比如test_1，test_2等；
    3.验证测试的数据：就是验证，用assert断言，在test_1函数中，验证当前返回数值跟预想的是否一样；开发中我们要assert各种各
样的数据，防止考虑欠佳；一定要考虑所有点，保证请求是对的；
    4.清理数据：在tearDown中执行；
    代码：在tests.py中书写测试用例类和函数，在manager.py中调用该测试用例(在脚本中执行)。

14.部署到服务器
    看record_class07中很详细。



15.项目总结：
    初始化一个入口app(调用Flask)，做web开发就是网页入口以及后台执行。
    网页入口写在views.py中，将网页入口写在app.route里面，注册进来；他的每一个网页入口就是处理的一个函数，在处理函数里做
一些参数解析。然后就是对数据库的一些操作了，数据库用的是SQLAlchemy，他从db.Model()继承下来之后就可以跟数据库实现一个ORM
的一一匹配，匹配之后就能对数据库中的表进行对应，同时还能对数据库中表与表之间建一些relationship的关联。relationship就是当
你查User表的时候，就可以把Image表相关的字段查出来，一对多。大大降低了SQL的开发量。
    除了以上，Flask还增加了额外工具，比如Flask-Script，就可以跑很多脚本命令(@manager.command)，比如跑一些测试用例，初始
化数据等。
    该项目在除了Flask框架以及数据库的之外还有图片的上传功能。上传方式有两种，一种是通过Flask自己上传过来，直接保存在本地
服务器；还有一种是保存在七牛云服务器，通过调用qiniu模块中的一些API，先request获取待上传的文件以及文件名，然后调用qiniu的
上传函数上传根据状态码判断后面的过程，最终返回七牛云上图片的url，用于个人详情页中上传图片的显示。
    项目中使用Flask-Login框架进行登录/注册，指定了用户的加载方式，再对用户状态进行扩展(3个字段，是否激活等等，1个get_id)，
来实现登入登出。登入登出逻辑就是获取用户名/密码，判断用户名/密码是否符合业务逻辑，然后调用Flask-Login的login函数进行登录。
注册也是一样的逻辑，通过post请求获取表单中的username/password，然后存入数据库在进行登录；我们还加入了邮件验证的注册方法，
设立email_click字段，如果未点击我们的邮件认证链接，则不允许注册，邮件发送使用的Flask-Mail框架，配置好邮件的信息即可，加入
邮件发送人/内容/标题等等，期间还加入token验证，防止用户认证链接被盗取。我们在登录之后还加入next变量跳转，登陆之后返回登录
前页面。
    在首页/个人详情页融入AJAX异步刷新的方式，就是使用数据库的一个分页查询函数，每次查x条，然后存入一个map中，转换成json字
符串，送给前端显示，这主要是前端的代码，不是我负责的，我只写了个分页查询的route入口函數供前端调用。
    项目中对图片加入评论增加功能，使用post请求获取服务器中评论的内容，它是可以向服务器发送修改请求，从而修改服务器的，比
方说，我们要在论坛上回贴、在博客上评论，这就要用到Post了，当然它也是可以仅仅获取数据的。获得评论内容后加入数据库中，然后
对一系列数据(评论id,图片id,评论内容)转换成json串返回给前端显示。
    最后项目还加入UT测试，做一些简单的功能验证等。
    项目部署，部署在腾讯云服务器上，使用nginx+gunicorn+ubuntu的环境配置，期间碰到主要问题是ubuntu下mysql的链接不必配，需
要使用ubuntu下的IP地址进行链接，在Windows使用navcat远程访问浏览。前端通过nginx方式起来，因为nginx加载静态文件比较块；服务
器使用gunicorn的方式将web server起来。最终申请了一个域名，将域名与云服务器的IP连起来，直接访问。



16.项目可扩展部分：
    A:产品功能扩展：
<1>首页滚动到底部自动加载更多
<2>管理员后台删图
    如果是管理员的话，在每张图上增加删除图片按钮，可以删除该图。这样的话，User表需要扩充，需要加一个角色字段，如果是管理
员才能进行操作。表完成后，加载route中的删除接口，这里面要判断权限能否删除，然后就是删除图片从数据库中，首页刷新一下即可。
<3>每日推荐图片首页置顶
    现在最简单的是根据时间来排序图片在首页展示，可以根据评论量等将高评论的图片加载带首页顶部等等。
<4>导购小尾巴，图片内嵌广告（smzdm.com）
    加载商品链接，比如通过阿里妈妈给商品链接做广告。
    B:技术深度扩展
<1>记录PV、热度排序
    图片是按时间排序，改成按浏览量首页展示等。
<2>缩图服务
    七牛云实时缩图。
<3>爬虫自动填充图片----重点做
    可参考：https://blog.csdn.net/zhyh1435589631/article/details/51889510
    scrapy框架。爬下来，跟数据库链接起来即可。



17.项目面试常问：
    Q:后台页面是怎么展现的？URL先解析，解析过后做一些业务逻辑，然后通过模板将页面渲染出来，最后写一些数据到数据库。
    我做了一个图片分享网站，有登录注册评论等常见功能。简单介绍即可。下面是重点。千万不要念简历，着重讲某几个深入的点。
简历也不要写产品的功能，多写几个技术。
    <1>数据库， ORM
    我底层使用了MySQL数据库，由于我是用python语言进行开发，所以使用的是sqlalchemy这个框架，提出框架的优点，解决了什么问题。
该框架是一个ORM的思想，把数据库的数据与开发过程中的对象关联起来，这是一种思想，简化了开发的过程。将数据库中的model与代码
中的类一一匹配起来，大幅提高开发效率。
    重要：要研究sqlalchemy中一个比较细的点，比如一对多，多对多，lazy加载(个人打算着重研究这个，因为有资料)，就这样这种
讲一个sqlalchemy(ORM)优化的点，就够了。
    <2>MVC，前后端分离，模板
    没做过项目之前，就觉得web开发就是一个面向过程的，第一步做什么，第二步做什么云云。后来项目中使用了MVC模式，其实是分的
很开的：模型(跟数据库相关联的)是放在一起的(在model.py中)，视图(view.py)是放在一起的，flask的入口是放在一起的。
    然后讲我们的页面是怎么实现的，是在view.py中使用render_template，这就表明我们的数据操作和页面展示是独立前后端分离的，
就是通过render_template这个东西将前后端数据连起来的。
    重要：1.要研究一下render_template是怎么把template跟变量传递的？2.又是怎么把变量渲染出来的？3.MVC要讲出数据的传递，对
象的复用(前端模板的继承，后端类，各个对象的相互关联)，结构化(前后端分离)。
    <3>云SDK接入
    这个七牛云的SDK就是在云存储部分用到的，图片上传至云服务器。这里其实没什么好讲的，都是别人的SDK，所以要突出快速学习
能力。
    重要：客户提出要将图片存到云上，经查资料发现七牛云服务器正好与我们的业务匹配(价格合适，数据量不大等)。然后讲是怎么学
的：快速把SDK官方的代码拿过来，挑选能用的部分(即项目想做的事情)，比如我们只需要图片上传以及云实时缩图，着重研究SDK中相应
章节，了解他大体是怎么做的，去读他们SDK的源码，为了提高开发效率，没去写他们的SDK，但是去阅读并使用了。附上SDK链接：
https://developer.qiniu.com/kodo/sdk/1242/python#upload
    <4>AJAX
    增加产品的交互性，主要还是json串的格式，分页查询等知识。
    <5>Flask框架
    讲Flask框架好在哪里？把request，response都独立出来；把网页开发核心的几个点都独立包装成模块；然后通过注册路径映射的方
式将前后端数据联系。
    <6>单元测试
    测试四部曲，UT需要考虑测试的完整性，功能验证要全等。
    <7>Git工具
    熟悉这个工具等等。