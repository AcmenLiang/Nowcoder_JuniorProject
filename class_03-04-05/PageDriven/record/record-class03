    本节课讲用flask将数据库链接起来，并实现若干个页面。将class02中的理论内容实现出来。目标：主页为图片列表，有图片，发表
时间等等，都是从数据库读取出来；然后点击进某个图片后，是图片的详情页，有作者，评论数，评论内容等等；然后再点进这个作者
信息，就显示作者发表的图片，历史信息等等。
    class03要实现这3个详情页并跟数据库连接起来。

    先看视频了解架构，学习基础知识，课下自己看相关用到的框架，然后自己做一个页面详情的开发作为作业。
本节课程笔记如下：
<1>项目结构搭建框架(即文件夹的分类以及功能)：
    application                 # 根目录名称
        manage.py               # 外部的脚本控制文件，做一些数据初始化，跑些任务等等
        runserver.py            # 启动我们的web服务器application

        application             # 子目录application，web目录，网站的所有逻辑应用在里面
            app.conf            # 将web所有的配置信息写在这个文件中
            models.py           # 存放各个表的类，比如User类，Image类等等，对于MySQL中的各个表
            views.py            # 视图文件，每一个URL点击进去都有一个页面，写这个URL页面的函数(比如 \index\)就叫一个view
            __init__.py         # 将子目录的application当做一个模块，外界想引用时就要暴露出去，该文件就是模块导出文件，其他文件就可以直接调用该文件

            static              # 目录，静态文件，存放.css文件，用于渲染模板
            templates           # 目录。页面模板
                base.html       # 就是公共的框架
                index.html      # 首页
                login.html      # 登录页
                profile.html    # 个人详情页
                怕个Detail.html # 图片详情页


<2>flask-sqlalchemy框架的使用
    安装flask-sql的各种包。
    再就是flask和sqlalcherm的交互，需要学习这个框架，顺着手册浏览一遍即可，但是要提前熟悉下SQL语句。sqlalchemy在这里是
flask的一个扩展，真正的sqlalchemy很复杂，我们只需要学习一下他和flask的交互使用即可。


<3>ORM介绍----即对象关系映射
    即对象关系映射，先举个例子，网页上的商品，每个商品都有属性，这些属性比如大小，颜色等，这在数据库中都会存在一张表中，
而且这张表都会关联其他表(比如一个订单)，这在数据库中就是一个订单关联一张表；但是在网站服务器上，内存中会有一个订单的类，
也有一个商品的类，那么订单的类中肯定有一个变量是和商品的类相关联的；所以说，如果有一个工具能使数据库中表与表之间的关系
和服务器中类与类的关系一一匹配起来，匹配的这个工作就是ORM干的事情。
    这节课用的Flask-SQLAlchemy干的就是将服务器的类与类同数据库中的表与表匹配起来。
    ORM补充资料:https://www.cnblogs.com/huanhang/p/6054908.html


<4>数据库配置/切换
    对象关系映射提供了概念性的，易于理解的模型化数据的方法。
    使用Flask-SQLAlchemy将服务器的类与类同数据库中的表与表匹配起来。
    将配置信息写入app.conf文件，目的就是模块化编程，关于如何配置直接去官网看每个关键字所代表的含义即可。如何引入配置
即在__init__.py文件中写入：app.config.from_pyfile('app.conf')   .
    常用配置信息：http://www.pythondoc.com/flask-sqlalchemy/config.html#id2


<5>数据模型
    模型也就是数据库中的一张张表，即如何在models.py文件中建一个个类对应数据库中的一张张表。其中包括表的名字，表的属性，
表与表之间的关系，构造函数，__repr__函数等等知识，要学会写这个类。
    关于db.model的补充：http://www.pythondoc.com/flask-sqlalchemy/models.html
    具体知识在下面的小节中还有。
    这里面还有__tablename__等属性，还有limit,first等一系列方法，用到了可以从官网查看。


<6>数据关系：一对多 多对多
    面向对象编程语言与数据库之间的联系，通过ORM建立映射。相当于对数据库数据进行操作。主要就是：
ForeignKey的作用：
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    # ForeignKey仅仅是取其他表中键的值，而并非关联起来，是表1的id用了表2的id，则用ForeignKey拷过来；若是关联，则用relationship
    # 图片是那个用户ID发表的，则images表中的user_id是用users表中的id来的；他们有关联性，这是ORM的好处；
    # users的id是主键，users是id的主键表；images相对于users中的id来说是外键表；
    # 想让主键表中的键值直接过来用ForeignKey函数来实现；
relationship的作用：
    images = db.relationship('Image', backref='users', lazy='dynamic')
    # 含义解释：将两个表(User与Image)关联起来了，表示User中的image是从Image类来的；
    一对多查询，解释backref的作用：
    user = User.query.get(10)  # 获取User类中主键id=10的用户变量
    print 'test10', user, user.images.all()  # 查询出来如果有很多数据的话，要加上all()，不然会打出一些SQL语句来；
    # 打印跟id=10相关联的所有image，之所有能实现，是在User类中将images与User关联起来了，用的relationship，即一对多的概念；
    image = Image.query.get(35)  # 查询图片id为35的变量
    print 'test11', image, image.user_id  # 这里是用的Image类中的变量，即user_id，即发图片的是哪个人
    # 这里要在User类中将User类与Image类关联的时候(relationship语句中)，加上backref='users'，表示反关联，即双向关联，这样也就能
    # 根据图片的id查询到人的id了；上面两个print语句就是表示了双向关联可以互相查询的意思；


<7>增删改查数据
1.增加数据：
    db.session.add()
2.删除数据：
    (1)db.session.delete(comment)
    (2)Comment.query.filter_by(id = 30).delete()
3.更新数据：
    (1)user = User.query.get(user_i_id)
       user.username = '[New1]' + user.username
    (2)User.query.filter_by(id = 50).update({'username':'[New2]'})
4.查询数据：
    (1)User.query.all()
    (2)User.query.filter(and_(User.id > 88, User.id < 93)).first_or_404()
    (3)user.images.all()
    (4)User.query.order_by(User.id.desc()).paginate(page=1, per_page=10).items


<8>模板继承
    是页面开发相关的。前端的页面我们其实不用写，但是人家写好给我们后我们需要学会提取出模板来，转化成模板的写法。然后用
MVC的格式，对view进行传参修改页面显示等等，具体的页面渲染与页面的语言不需要去学。拿来用即可。
    JavaScript和CSS文件都不用写，已经有。根据给出的.html页面，一共4个，分别如下：
index.html  首页      login.html  登录页面        profile.html    个人主页    pagedetial.himl   图片详情页
    我们发现其实这几个.himl中的内容大部分都是一样的，我们可以提取出一个模板来，即base.html。将不变的部分也在这个页面里，
然后将需要替换的部分用：{% block xxx%}{% endblock %} 来完成，然后在继承base.html的页面中加上{% extends "base.html"%} ,
然后下面就是block中xxx不同的部分。
提取过程：
    1.看index.html的源代码，header的上面部分，footer的下面部分都是公共部分；公共部分是base.html，非公共部分用{%block%}
包起来；在继承的子页上注明是继承的哪个页，即{% extends "base.html" %};
    2.由于是别人写好的HTML文件，有些数据是写死的，我们有了数据库数据后，就用变量替换掉；
    3.将所有能替换的部分用我们自己的变量替换好后，就开发完毕了；
总结：
    先创建一个核心的模板；把要替换的部分用block表示；真正的页面用block继承；继承之后再把每个块替换掉；替换的内容就是从
数据库读取；
    具体例子见templates中的几个.html(base.html,index.html等)文件。这块只是主要是jinja2模板开发中的模板继承部分，详情资料
见：http://jinja.pocoo.org/docs/2.10/templates/#template-inheritance


<9>首页/用户个人页/图片详情页 3个页面的开发
    使用flask-sqlalchermy将python与mysql数据库链接，使用ORM这种简历对象映射；使用flask-script开发脚本文件创建manger.py
文件进行调试；通过使用jinja2模板语言对.html文件进行改写，在python中使用render_template进行模板显示，完成MVC。
    跟着课程代码敲完了，下次课继续完善功能，HTML的文件太难看了，这一块就不要深究了。
    下次做的时候，理解框架即可，HTML的部分不看了，直接copy过来。理解了和数据库的交互，框架的使用是重点。
    后面开发的时候HTML部分要跟着视频慢慢写，可以不用管为什么，但是要从头写，不然复制的话容易出bug，比如命名，语句，位置
等等一系列问题。



开发过程中遇到的问题：
<1>安装flask-MySQLDB库，必须python    pip     mysql-connector-c-6.0.2-winx64      同时为64位。且pip要为10.0；并且
最后要替换新版的pycharm安装文件；    最后还要安装一个VCForPython27的C++编译器供python使用。
<2>关于python的import某个模块，是从目录中导入，比如from application import app，而不是从__init__文件中导入。
<3>sqlite中中文的话需要加上 u'牛客' 这样子
<4>MySQL数据库暂时连接不上，就先用sqlite
<5>import views, models要在app db实例声明的后面
<6>__init__.py文件的作用了解一下，不是那么简单的一个文件
<7>sqlite软件中每张表的DDL部分可以看具体几张表之间的关系，包括relationship，主键，外键都可以看
<8>查询出来如果有很多数据的话，要加上all()，不然会打出一些SQL语句来；
<9>在配置信息的时候，可以只用mysql，而不必加上pymysql;
<10>MySQL workbench中有些基础操作没搞懂导致犯错，不熟悉MySQL也犯了一些错，熟悉了这2个就好了；
<11>对于manager.py文件仅仅是测试的时候用，对mysql中的数据进行增删改查，先建立一些假数据，在web页面开发的时候能显示出来；
在真正上线的时候，就会剥离这个，让数据库动态的run起来；