    本节课讲用flask将数据库链接起来，并实现若干个页面。将class02中的理论内容实现出来。目标：主页为图片列表，有图片，发表
时间等等，都是从数据库读取出来；然后点击进某个图片后，是图片的详情页，有作者，评论数，评论内容等等；然后再点进这个作者
信息，就显示作者发表的图片，历史信息等等。
    class03要实现这3个详情页并跟数据库连接起来。


    先看视频了解架构，学习基础知识，课下自己看相关用到的框架，然后自己做一个页面详情的开发作为作业。
本节课程笔记如下：
<1>项目结构搭建框架(即文件夹的分类以及功能)：
    application                 # 根目录名称
        manage.py               # 外部的脚本控制文件，做一些数据初始化，跑些任务等等
        runserver.py            # 启动我们的web服务器application

        application             # 子目录application，web目录，网站的所有逻辑应用在里面
            app.conf            # 将web所有的配置信息写在这个文件中
            models.py           # 数据模型
            views.py            # 视图文件，每一个URL点击进去都有一个页面，写这个URL页面的函数(比如 \index\)就叫一个view
            __init__.py         # 将子目录的application当做一个模块，外界想引用时就要暴露出去，该文件就是模块导出文件，其他文件就可以直接调用该文件

            static              # 目录，静态文件，存放.css文件
            templates           # 目录。页面模板
                base.html       # 就是公共的框架
                index.html      # 略...
                login.html      # 各种各样的页面等



<2>flask-sqlalchemy框架的使用
    安装flask-sql的各种包。
    再就是flask和sqlalcherm的交互，需要学习这个框架，顺着手册浏览一遍即可，但是要提前熟悉下SQL语句。sqlalchemy在这里是
flask的一个扩展，真正的sqlalchemy很复杂，我们只需要学习一下他和flask的交互使用即可。



<3>ORM介绍----即对象关系映射
    即对象关系映射，先举个例子，网页上的商品，每个商品都有属性，这些属性比如大小，颜色等，这在数据库中都会存在一张表中，
而且这张表都会关联其他表(比如一个订单)，这在数据库中就是一个订单关联一张表；但是在网站服务器上，内存中会有一个订单的类，
也有一个商品的类，那么订单的类中肯定有一个变量是和商品的类相关联的；所以说，如果有一个工具能使数据库中表与表之间的关系
和服务器中类与类的关系一一匹配起来，匹配的这个工作就是ORM干的事情。
    这节课用的Flask-SQLAlchemy干的就是将服务器的类与类同数据库中的表与表匹配起来。
    ORM补充资料:https://www.cnblogs.com/huanhang/p/6054908.html



<4>数据库配置/切换
    对象关系映射提供了概念性的，易于理解的模型化数据的方法。
    使用Flask-SQLAlchemy将服务器的类与类同数据库中的表与表匹配起来。
    将配置信息写入app.conf文件，目的就是模块化编程，关于如何配置直接去官网看每个关键字所代表的含义即可。如何引入配置
即在__init__.py文件中写入：app.config.from_pyfile('app.conf')   .
    常用配置信息：http://www.pythondoc.com/flask-sqlalchemy/config.html#id2



<5>数据模型
    模型也就是数据库中的一张张表，即如何在models.py文件中建一个个类对应数据库中的一张张表。其中包括表的名字，表的属性，
表与表之间的关系，构造函数，__repr__函数等等知识，要学会写这个类。
    关于db.model的补充：http://www.pythondoc.com/flask-sqlalchemy/models.html
    具体知识在下面的小节中还有。
    这里面还有__tablename__等属性，还有limit,first等一系列方法，用到了可以从官网查看。



<6>数据关系：一对多 多对多



<7>增删改查数据



<8>模板继承



<9>首页/用户个人页/图片详情页 3个页面的开发








开发过程中遇到的问题：
<1>安装flask-MySQLDB库，必须python    pip     mysql-connector-c-6.0.2-winx64      同时为64位。且pip要为10.0；并且
最后要替换新版的pycharm安装文件；    最后还要安装一个VCForPython27的C++编译器供python使用。
<2>关于python的import某个模块，是从目录中导入，比如from application import app，而不是从__init__文件中导入。
<3>sqlite中中文的话需要加上 u'牛客' 这样子
<4>MySQL数据库暂时连接不上，就先用sqlite
<5>import views, models要在app db实例声明的后面
<6>__init__.py文件的作用了解一下，不是那么简单的一个文件
<7>sqlite软件中每张表的DDL部分可以看具体几张表之间的关系，包括relationship，主键，外键都可以看
<8>查询出来如果有很多数据的话，要加上all()，不然会打出一些SQL语句来；