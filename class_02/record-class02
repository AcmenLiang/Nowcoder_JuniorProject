    本节只是为后面开发做的基础知识准备，不了解的内容没事，开发起来的时候节课实践就明白了。
一：本节获得的收获和技能：
1.python的装饰器，学会了python的装饰器的用法，用处，用途等等；基础知识在decorator.py文件中，实践用法在flask框架中，
自己看里面的笔记。



2.python做web开发基础知识之----HTTP协议简介：
a.了解Chrome浏览器的开发者工具，可见廖雪峰网站HTTP协议简介 https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832653051fd44e44e4f9e4ed08f3e5a5ab550358d000
b.Response Headers响应头:服务器能接受浏览器发送过来的各种允许的请求方法，状态等等；点击view source 显示服务器返回的原始响应数据
  Requests Headers响应头：浏览器能接受服务端发送过来的各种允许的请求方法，状态等等；点击view source 显示浏览器发给新浪服务器的请求
c.HTTP响应分为Header和Body两部分  :Content-Type指示响应的内容，这里是text/html表示HTML网页
HTTP响应的Body就是HTML源码
d.当浏览器读取到新浪首页的HTML源码后，它会解析HTML，显示页面，然后，根据HTML里面的各种链接，再发送HTTP请求给新浪服务器，
拿到相应的图片、视频、Flash、JavaScript脚本、CSS等各种资源，最终显示出一个完整的页面。所以我们在Network下面能看到很多
额外的HTTP请求。
    补充HTTP请求：
跟踪了新浪的首页，我们来总结一下HTTP请求的流程：
步骤1：浏览器首先向服务器发送HTTP请求，请求包括：
方法：GET还是POST，GET仅请求资源，POST会附带用户数据；路径：/full/url/path；域名：由Host头指定：Host: www.sina.com.cn
以及其他相关的Header；如果是POST，那么请求还包括一个Body，包含用户数据。

步骤2：服务器向浏览器返回HTTP响应，响应包括：
响应代码：200表示成功，3xx表示重定向，4xx表示客户端发送的请求有错误，5xx表示服务器端处理时发生了错误；
响应类型：由Content-Type指定；
以及其他相关的Header；
通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中。

步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2。
Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP请求中把HTML
发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处
理一个资源。

e. HTTP是一种文本协议。
HTTP get请求的格式：
GET /path HTTP /1.1
Header1: value1
Header2: value2

HTTP POST请求的格式：
POST /path HTTP/1.1
Header1: Value1
Header2: Value2

HTTP响应的格式：
200 OK
Header1: Value1
Header2: Value2



3.python做web开发基础知识之----HTML简介
    HTML定义了一套语法规则，来告诉浏览器如何把一个丰富多彩的页面显示出来。HTML文档就是一系列的Tag组成，最外层的Tag是<html>。
    CSS简介，CSS用来控制HTML里的所有元素如何展现，比如，给标题元素<h1>加一个样式，变成48号字体，灰色等等。
    JavaScript简介，JavaScript是为了让HTML具有交互性而作为脚本语言添加的，JavaScript既可以内嵌到HTML中，也可以从外部
链接到HTML中。如果我们希望当用户点击标题是把标题变成红色，就必须通过JavaScript实现。
    HTML定义了页面的内容，CSS来控制页面元素的样式，而JavaScript负责页面的交互逻辑。
    当我们用Python或者其他语言开发Web应用时，我们就是要在服务器端动态创建出HTML，这样，浏览器就会向不同的用户显示出不同
的Web页面。



4.python做web开发基础知识之----WSGI接口
    web应用的本质就是：
    a.浏览器发送一个HTTP请求；
    b.服务器收到请求，生成一个HTML文档；
    c.服务器把HTML文档作为HTTP响应的body发送给浏览器；
    d.浏览器收到HTTP响应，从HTTP body取出HTML文档并显示；
    底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和
响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。
    这个接口就是WSGI：Web Server Gateway Interface。
def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    return '<h1>hello,web!</h1>'
    该函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数：
environ：一个包含所有HTTP请求信息的dict对象；  start_response：一个发送HTTP响应的函数。
    整个application()函数本身没有涉及到任何解析HTTP的部分，也就是说，底层代码不需要我们自己编写，我们只负责在更高层次上
考虑如何响应请求就可以了。
    总：无论多么复杂的Web应用程序，入口都是一个WSGI处理函数。HTTP请求的所有输入信息都可以通过environ获得，HTTP响应的输出
都可以通过start_response()加上函数返回值作为Body。
    复杂的Web应用程序，光靠一个WSGI函数来处理还是太底层了，我们需要在WSGI之上再抽象出Web框架，进一步简化Web开发。
https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832689740b04430a98f614b6da89da2157ea3efe2000



5.python做web开发基础知识之----使用web框架————Flask  以及 叶神课堂笔记，----flask的URL访问代码的相关操作知识
代码在test01.py  LiaoXF文件夹-app.py 两个文件中。
    其实一个Web App，就是写一个WSGI的处理函数，针对每个HTTP请求进行响应。但是如何处理HTTP请求不是问题，问题是如何处理100
个不同的URL。
    WSGI提供的接口虽然比HTTP接口高级了不少，但和Web App的处理逻辑比，还是比较低级，我们需要在WSGI接口之上能进一步抽象，让
我们专注于用一个函数处理一个URL，至于URL到函数的映射，就交给Web框架来做。
    写一个app.py，处理3个URL，见app.py文件。
    有了Web框架，我们在编写Web应用时，注意力就从WSGI处理函数转移到URL+对应的处理函数，这样，编写Web App就更加简单了。
https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832704232d6fb5df42dd34a7890fa6254351faac7000



6.叶神课堂笔记----HTTP Method，代码见test02.py
<1>HTTP协议复习：
a.怎么样标志分布在整个互联网上的万维网文档？
    使用URL。URL格式为：<协议>://<主机>:<端口>/<路径>
b.用什么协议来实现万维网上的各种链接？
    使用HTTP(超文本传输)协议。在浏览器和服务器之间的请求和响应的交互，必须按照规定的格式和遵循一定的规则。这些规则和格式
就是超文本传输协议HTTP。HTTP协议是无链接的，是无状态的。
    HTTP有两类报文，请求报文和响应报文。区别就是开始行不同，请求报文的开始行为请求行，格式为：方法 URL 版本 回车换行
响应报文的开始行为状态行，格式为：版本 状态码 短语 回车换行
    请求行中的方法为：(HTTP Method 为了让客户端/服务器了解HTTP请求的)
GET         请求读取由URL所标志的信息
POST        给服务器添加信息（例如，注释）
HEAD        紧急查看接口HTTP的头
PUT         支持幂等性的POST。幂等性是指这个方法调用两次结果是一样的，即这个函数无论被调用多少次，这个结果都是一样的；想
            一下支付宝提交余额的例子。
DELETE      删除服务器上的资源
OPITIONS    查看支持的方法
    状态码：
1xx     表示通知信息，如请求收到了或正在进行处理
2xx     表示成功
3xx     表示重定向，如要完成请求还要进一步做出请求
4xx     表示客户端的差错，如请求中有错误的语法或不能完成
5xx     表示服务器的差错，如服务器失效无法完成请求

c.怎样使不同作者创建不同的万维网文档，且都能显示出来？
    万维网使用超文本标记语言HTML，使得万维网页面设计者可以很方便的用链接从本页面抽出连接到互联网上的任何一个万维网页面，
并且能够显示出来。

<2>postman使用笔记：
    这一节只是介绍了下postman工具，输入URL后，进行get post等操作，具体如何调试，效果啥样子还没见到，因为这一节的例子还都
太简单了，看不到postman工具中请求和响应的复杂效果，比如添加key-value，抓包等等都没涉及。在下面的小节request和response
的时候会详细讲。现在只是自己看了点blog，
链接如下：
    https://www.cnblogs.com/Skyyj/p/6856728.html   这个讲的最好
    https://www.jianshu.com/p/ad7295d7bb41
    https://www.jellythink.com/archives/category/tool-tutorials/postman



7. python做web开发基础知识之----使用模板
    详情见LiaoXF文件夹app-MVC.py以及templates文件夹。
    Web App不仅仅是处理逻辑，展示给用户的页面也非常重要。在函数中返回一个包含HTML的字符串，简单的页面还可以，但是，想想
新浪首页的6000多行的HTML，你确信能在Python的字符串中正确地写出来么？反正我是做不到。
    使用模板，我们需要预先准备一个HTML文档，这个HTML文档不是普通的HTML，而是嵌入了一些变量和指令，然后，根据我们传入的数
据，替换后，得到最终的HTML，发送给用户。
    MVC的图示如图MVC.png，Model-View-Controller，中文名“模型-视图-控制器”。
    python处理URL的函数就是controller，它负责业务逻辑，比如检查用户名是否存在，取出用户信息等等；包含变量{{ name }}的模
板就是V：View，View负责显示逻辑，通过简单地替换一些变量，View最终输出的就是用户看到的HTML；MVC中的Model在哪？Model是用来
传给View的，这样View在替换变量的时候，就可以从Model中取出相应的数据。上面的例子中，Model就是一个dict：{ 'name': 'Michael' }
    现在我们改写app.py，用MVC模式改写一下为app-MVC.py。
    辅助链接笔记：https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832805619b3e68a9cf16c4d0398d8af8f6d50e740000



8. 叶神课堂笔记----静态和模板文件    使用flask中的render_template
    模板就是写好view之后，在python中只需要对model中的一些参数进行更改，模板中的一些变量需要后台的一些数据进行替换。
静态：默认目录static/templates，存放.css/js/images文件；模板：默认目录templates，存放.html文件。
    详情见test_03.py static templates文件。
    模板的语言也是一门编程语言，比如这里用到的模板jinja2.   jinja2模板语法
<1>jinja2模板，用于HTML文件中，用于写view，下面是常用的jinja2模板语法及例子，应用可见profile.html文件效果：
{{遍历/表达式}}
    {{names}}
{% 语法 %}
    {% for k,v in infos.items(): %}    # infos是.py文件传入的变量
    {{k}},{{v}} <br>
    {% endfor %}
{# 注释 #}
    {# 这是注释 #}
# 开头，行语法表达(line statements)
    app.jinja_env.line_statement_prefix = '#'
    如在HTML文件中用# for color in colors:
                    {{color}} <br>  {# 遍历colors元祖，将里面的元素打印出来#}
                    # endfor

<2>filter
默认目录：templates  文件：.html随意
    {% filter upper %}
    {% for k,v in infos.items(): %}
    {{k}},{{v}} <br>
    {% endfor %}
    {% endfilter %}
    效果，将打印出的key-value全部变成大写，因为加上了filter upper。filter就是模板里的工具包。

<3>模板继承
    include extends
    具体应用见官网http://docs.jinkan.org/docs/jinja2/templates.html#template-inheritance

<4>call/macro 宏类似常规编程语言中的函数。它们用于把常用行为作为可重用的函数，取代手动重复的工作
    {% macro render_color(color) -%}
    <div>This is color:{{color}} {{caller()}} </div><br>
    {%- endmacro %}

    {% for color in colors: %}          # 在上面宏定义了一个render_color函数，在后面就可以直接使用，用call render_color，比如这里
        {% call render_color(color) %}
            render_color_demo
        {% endcall %}
    {% endfor %}

<5>其他的jinja2模板语法去看官网文档，都有：
http://docs.jinkan.org/docs/jinja2/
    最后做项目用到jinja2模板中的什么语法就查什么，挨着看太浪费时间了。



9.叶神课堂笔记----request response    使用flask中的request    见test_04.py
    request：参数解析 客户端读取cookie 客户端请求HTTP字段 文件上传
    response：服务器页面HTML内容返回给客户端  服务器把cookie下发给客户端    服务器对客户端的HTTP字段设置，headers设置



10.重定向  使用flask中的redirect
    就是输入一个地址后会自动跳转到规定定向的某个地址去。   301：永久转移    302：临时转移
   error
    就是打印error的信息，传入404 403等错误参数，然后写一个.html的页面打印出来。
    见test_05.py文件。



11.Flash Message    使用flask中flash 以及 get_flashed_messages
    见test_06.py文件。
<1>
    当登陆成功后，会有登录成功的消息提示，两个页面之间会有一个session，就是这个消息闪现。
    flash 提示信息一般显示一段很简单的信息告知登录之类的信息。
    “Flask Message”是一个很有意思的功能，一般一个操作完成后，我们都希望在页面上闪出一个消息，告诉用户操作的结果。用户
看完后，这个消息就不复存在了。Flask提供的”flash”功能就是为了这个。
<2>
补充：
    发送：获取接口信息，flash(msg)；即发消息的时候，通过flash发出去；
    获取：想得到消息的时候，通过get_flashed_messages获取过来；通过一个for loop来循环提取出来；
    属性：通过session来唯一标示传递信息；
    注：别忘了一开始加上app.secret_key = 'nowcoder'，保证这个session的UUID能够产生出来。服务器就可以认出来是不是同一个人。



12.打Log代码演示     使用logging以及logging中的RotatingFileHandler
    见test_07.py文件。
<1>
    打log好处：可以看出每天的访问了，点赞等等；可以帮助调试bug；在开发中是十分重要的。
    log分三种，INFO > WARN > ERROR：
    一般函数的执行位置，时间等这种信息就用INFO标识，一般上线后就关闭了；WARN，ERROR这种的比较重要，单独放在某个文件中，
出问题会报警。
<2>
    打上log时，如果是给error打log，则3个文件都会显示，如果是给info打log，则只会在info.txt文件处显示log内容。



13.Flask-Script 代码演示    使用flask_script中的Manager
    见test_08_manager.py文件演示。
    Flask Script扩展提供向Flask插入外部脚本的功能，包括运行一个开发用的服务器，一个定制的Python shell，设置数据库的脚本，
cronjobs，及其他运行在web应用之外的命令行任务；使得脚本和系统分开。
    Flask Script和Flask本身的工作方式类似，只需定义和添加从命令行中被Manager实例调用的命令。
     运行后，在命令行中指向test_08_manager.py -?可以看到允许执行的命令；比如本例子可以执行test_08_manager.py hello
函数，以及initialize_database函数；把这些函数用flask-script做成脚本即可。
    等网站做大了，后面会有数据库的初始化，初始导入等等，那些东西写在哪里呢？一把就会采用脚本，将这些工作写在脚本中。
下节课就会把所有工作，初始化的工作啊，数据导入啊，清理啊，所有脚本要用到的东西，都会写在这个文件中，慢慢填充。
    具体应用在后几节开发中用到。






二：开发过程中碰到的问题：
1.在用flask的app.run()时，会默认调用port5000，如果test1.py用了port5000，没有杀死port5000的话，又写了test2.py继续使用
port5000，运行之后还是test1.py的程序样子。如何解决呢？
    a.不同程序用不同port或host,随便改一个就可以，等下次重启之后就会全部清0的；用这种即可，host和port那么多，不怕用，能看
到web效果就行；
    b.一个一个端口关闭，不推荐，太麻烦了，方法如下：https://blog.csdn.net/violet_echo_0908/article/details/50129679
打开cmd，进行如下操作：
step1：netstat -ano | findstr 5000 //列出进程及其占用的端口，且包含 5000 //打印出后，会发现进程号在最后面显示
step2：taskkill -PID 9248 -F //强制关闭某个进程,9248是进程号，想杀死哪个进程就输入step1中查到的进程号即可

2.曾经出现过的一个bug，跟编码有关，安装包的时候出现的，具体解决看如下链接：
    https://blog.csdn.net/u014235934/article/details/52209905




























