    该项目整个思路或碰到的问题以及用到的知识可以参考如下文章，可以将他的功能简述，技术路线，问题集锦摘录下来：
https://blog.csdn.net/zhyh1435589631/article/details/51787577
    关于项目实现，先自己按视频做，尽可能自己把视频中的功能实现；如果实现不了，参考网上项目的代码照着更改；如果实在是抄也
抄不出来，就看看往上那个人的代码，理解一下即可。简历的项目功能上是全部按照网上那个来写，就看怎么去吹牛了。

1.pycharm and Git

2.flask框架

3.flask-script模块的使用中manager脚本文件；

4.jinja2模板的使用，模板继承，如何对HTML文件进行改写开发，使用MVC模式；

5.flask sqlalchemy模块的使用与mysql建立ORM映射；

6.注册功能的业务实现：
    request中args,form,values请求方式：https://www.jianshu.com/p/ecd97b1c21c1
    注册后的业务判断，比如加上flash message：http://docs.jinkan.org/docs/flask/patterns/flashing.html
    flash message的分类闪现和过滤闪现，要在每一次返回首页时传给前端，做一个显示：
        一、闪现（message）
           “Flask Message”是一个很有意思的功能，一般一个操作完成后，我们都希望在页面上闪出一个消息，告诉用户操作的结果。
        用户看完后，这个消息就不复存在了。Flask提供的”flash”功能就是为了这个。“flash()”方法的第二个参数是消息类型，
        可选择的有”message”, “info”, “warning”, “error”。你可以在获取消息时，同时获取消息类型，还可以过滤特定的
        消息类型。只需设置”get_flashed_messages()”方法的”with_categories”和”category_filter”参数即可。
        1、流程：利用flask中的flash，向某个地方设置一个值，可以指定一个分类参数，用的时候就可以从保存的地方取出所有值，可以指定分类参数
        2、应用：通常用做对临时数据的操作
        3、原理：message是一个基于Session实现的用于保存数据的集合，保存到用户对应的session信息中，其特点是：使用一次就删除利用session.pop方法
        一定要注意要加secret_key 参数
        # 向某个地方设置一个值,category参数是分类的意思       分类闪现
        flash('超时错误',category="x1")
         # 从某个地方获取设置过的所有值，并指定分类，并清除。 过滤闪现
        data = get_flashed_messages(category_filter=['x1'])

6.flask-login模块的使用，登录/登出/浏览功能的业务实现；
    flask_login库的使用：https://www.jianshu.com/p/5a25413b4828
    flask-login中user_load的使用：https://zhidao.baidu.com/question/1832618256059873580.html
    可见record_class04中登录/登出功能实现，页面访问的笔记；
    使用flask-login需要注意的几点吧：
        1.要进行类实例的声明；
        2.要实现未登录没有权限是自动跳转到登录页，用view实现；
        3.要实现current_user全局变量的判断，即要有动态跳转页面，即如果登录了的话就会首页，未登录就会登录页；
        4.对页面优化，用next，登录后返回登录前的页面；
        5.其他的就是登录，注册，访问的基本要求就不写了，都在代码中，看record_class04中笔记。

7.profile的AJAX实现；
    AJAX就是一个业务上的需求，了解即可；见views.py中的user_images函数以及profile.html中的部分代码。
    AJAX的开发流程：前端设定一个更多按钮，等待后端发送过接口；后端发送一个map，里面存储hax_next，image等变量，每次都是
利用分页提取的方式存入map中，然后将map传给前端，前端拿来显示即可。

8.图片上传；
    详细内容见record_class05_<1> 里面清除写了各部分原理。
    技术流为fiddle web debugger工具的使用;HTTP post 单/多变量的上传；文件上传步骤的python代码逻辑；
    收获，不应该讲解几行代码，应该讲熟悉HTTP post协议，从头到尾数据是怎么打包的，数据是怎么跟参数解析出来的。

9.七牛云存储----通过python上传文件到七牛云服务器
    参考网站：
https://developer.qiniu.com/kodo/sdk/1242/python#upload
https://www.cnblogs.com/shijingjing07/p/5754273.html
https://www.cnblogs.com/lzxwalex/p/6629435.html
    收获，使用postman进行调试，没有前端的时候，模拟API接口，发送过后看HTTP头部的变化等，看web的的变化，比如是否上传成功
等。使用云实时缩图，独立CDN等优化，可以吹逼。
    代码逻辑以及详细代码在record_class05_<2>，主要文献看上面几个即可。

10.增加评论
    搞懂为什么用post请求；搞懂提交评论时所需构造的实例的属性怎么request来以及请求哪些属性；最后搞懂该给前端返回什么。
详情代码及注释见record_class05_<3>。








待增加功能：
1.首页AJAX分页浏览实现；跟前端关系太大，以后有时间在弄。
2.注册时需要加上邮件激活；跟前端关系太大，以后有时间在弄。
    https://blog.csdn.net/liuredflash/article/details/79632489
    https://blog.csdn.net/zhyh1435589631/article/details/51585231
3.爬虫获取图片信息；
    可参考如下：https://blog.csdn.net/zhyh1435589631/article/details/51889510
4.注册/登录页的优化
5.boostrap 导航条替换
6.各种优化
    看完视频后这些功能再一一添加，再写简历。